Description: >
    This cloudformation script will prepare to deploy the flask-app into a Amazon Elastic Kubernetes Service.

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.3.0/24

    BastionInstanceType:
        Description:
            "The EC2 instance type of general purpose"
        Type: String
        AllowedValues: [t2.micro, t2.medium, t3.small, t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]

    BastionImageID:
        Description: ImageID to create Ec2 instances
        Type: "String"
        Default: "ami-005bdb005fb00e791"

    KeyName:
      Description: The EC2 Key Pair to allow SSH access to the instances
      Type: AWS::EC2::KeyPair::KeyName
      Default: my-ssh-key

    WorkerNodeImageId:
      Type: AWS::EC2::Image::Id
      Description: AMI id for the EKS Worker node instances. Search EKS Worker AMIs provided by AWS.
      Default: "ami-0ac376dde98c141d0"

    WorkerNodeInstanceType:
      Description: EC2 instance type for the node instances
      Type: String
      Default: "t2.micro"

    WorkerNodeBootstrapArguments:
      Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
      Default: "--kubelet-extra-args --node-labels=nodetype=worker"
      Type: String


Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: us-west-2a
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
                - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
                  Value: shared
                - Key: "kubernetes.io/role/elb"
                  Value: "1"

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: us-west-2b
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
                - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
                  Value: shared
                - Key: "kubernetes.io/role/elb"
                  Value: "1"

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: us-west-2a
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
                - Key: !Sub "kubernetes.io/role/internal-elb"
                  Value: 1
                - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
                  Value: shared

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: us-west-2b
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)
                - Key: !Sub "kubernetes.io/role/internal-elb"
                  Value: 1
                - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
                  Value: shared

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow SSH to our BastionInstance
            VpcId: !Ref VPC
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    BastionInstance:
        Type: "AWS::EC2::Instance"
        DependsOn: BastionSecurityGroup
        Properties:
            InstanceType: !Ref BastionInstanceType
            ImageId: !Ref BastionImageID
            KeyName: !Ref KeyName
            NetworkInterfaces:
              - AssociatePublicIpAddress: "true"
                DeviceIndex: "0"
                SubnetId: !Ref PublicSubnet1
                GroupSet:
                - !Ref BastionSecurityGroup

    EKSClusterInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - !Ref EKSClusterInstanceRole

    EKSClusterInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - eks.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        RoleName: !Join [ "-", [ !Ref 'AWS::StackName', "EKS-Cluster-Role" ] ]
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess

    EKSClusterSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group EKS Cluster
        GroupName: !Join [ "", [ !Ref 'AWS::StackName', "-EKS-Cluster-Security-Group" ] ]
        VpcId: !Ref VPC
        Tags:
        - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
          Value: 'owned'
        - Key: 'Name'
          Value: !Join [ "", [ !Ref 'AWS::StackName', "-EKS-Cluster-Security-Group" ] ]

    EKSCluster:
      Type: "AWS::EKS::Cluster"
      Properties:
        Name: !Join [ "", [ !Ref 'AWS::StackName', "-EKS-Cluster" ] ]
        ResourcesVpcConfig:
          SecurityGroupIds:
            - !Ref EKSClusterSecurityGroup
          SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
        RoleArn: !GetAtt EKSClusterInstanceRole.Arn
        Version: 1.15

    WorkerNodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - !Ref WorkerNodeInstanceRole

    WorkerNodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        RoleName: !Join [ "-", [ !Ref 'AWS::StackName', "EKS-Worker-Node-Role" ] ]
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

    WorkerNodeSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for all nodes in the cluster
        GroupName: !Join [ "", [ !Ref 'AWS::StackName', "-EKS-Worker-Node-Security-Group" ] ]
        VpcId: !Ref VPC
        Tags:
        - Key: !Sub "kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster"
          Value: 'owned'
        - Key: 'Name'
          Value: !Join [ "", [ !Ref 'AWS::StackName', "-EKS-Worker-Node-Security-Group" ] ]
        - Key: eks:nodegroup-name
          Value: 'WorkerNodeGroup'

    AllowInboundTrafficToWorkerNodesFromWorkerNodes:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow kubernetes node to communicate with each other
        GroupId: !Ref WorkerNodeSecurityGroup
        SourceSecurityGroupId: !Ref BastionSecurityGroup
        IpProtocol: '-1'
        FromPort: 0
        ToPort: 65535

    WorkerNodeSecurityGroupIngress:
      Type: "AWS::EC2::SecurityGroupIngress"
      DependsOn: WorkerNodeSecurityGroup
      Properties:
        Description: Allow node to communicate with each other
        FromPort: 0
        GroupId: !Ref WorkerNodeSecurityGroup
        IpProtocol: "-1"
        SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
        ToPort: 65535

    EKSClusterSecurityGroupIngress:
      Type: "AWS::EC2::SecurityGroupIngress"
      DependsOn: WorkerNodeSecurityGroup
      Properties:
        Description: Allow pods to communicate with the cluster API Server
        FromPort: 443
        GroupId: !Ref EKSClusterSecurityGroup
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
        ToPort: 443

    ControlPlaneEgressToWorkerNodeSecurityGroup:
      Type: "AWS::EC2::SecurityGroupEgress"
      DependsOn: WorkerNodeSecurityGroup
      Properties:
        Description: Allow the cluster control plane to communicate with worker Kubelet and pods
        DestinationSecurityGroupId: !Ref WorkerNodeSecurityGroup
        FromPort: 1025
        GroupId: !Ref EKSClusterSecurityGroup
        IpProtocol: tcp
        ToPort: 65535

    ControlPlaneEgressToWorkerNodeSecurityGroupOn443:
      Type: "AWS::EC2::SecurityGroupEgress"
      DependsOn: WorkerNodeSecurityGroup
      Properties:
        Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
        DestinationSecurityGroupId: !Ref WorkerNodeSecurityGroup
        FromPort: 443
        GroupId: !Ref EKSClusterSecurityGroup
        IpProtocol: tcp
        ToPort: 443

    WorkerNodeSecurityGroupFromControlPlaneIngress:
      Type: "AWS::EC2::SecurityGroupIngress"
      DependsOn: WorkerNodeSecurityGroup
      Properties:
        Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
        FromPort: 1025
        GroupId: !Ref WorkerNodeSecurityGroup
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
        ToPort: 65535

    WorkerNodeSecurityGroupFromControlPlaneOn443Ingress:
      Type: "AWS::EC2::SecurityGroupIngress"
      DependsOn: WorkerNodeSecurityGroup
      Properties:
        Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
        FromPort: 443
        GroupId: !Ref WorkerNodeSecurityGroup
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref EKSClusterSecurityGroup
        ToPort: 443

    WorkerNodeLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress: 'False'
        IamInstanceProfile: !Ref WorkerNodeInstanceProfile
        ImageId: !Ref WorkerNodeImageId
        InstanceType: !Ref WorkerNodeInstanceType
        KeyName: !Ref KeyName
        SecurityGroups:
        - !Ref WorkerNodeSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 10
              VolumeType: gp2
              DeleteOnTermination: true
        UserData: !Base64
          "Fn::Sub": |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${AWS::StackName}-EKS-Cluster ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}

    WorkerNodeGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        DesiredCapacity: 1
        LaunchConfigurationName: !Ref WorkerNodeLaunchConfig
        MinSize: 1
        MaxSize: 3
        VPCZoneIdentifier:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
        Tags:
        - Key: Name
          Value: !Sub "${EKSCluster}-Worker-Node"
          PropagateAtLaunch: 'true'
        - Key: !Sub 'kubernetes.io/cluster/${AWS::StackName}-EKS-Cluster'
          Value: 'owned'
          PropagateAtLaunch: 'true'
        - Key: !Sub 'k8s.io/cluster-autoscaler/${AWS::StackName}-EKS-Cluster'
          Value: 'owned'
        - Key: 'eks:nodegroup-name'
          Value: 'WorkerNodeGroup'
        - Key: eks:cluster-name
          Value: !Sub '${AWS::StackName}-EKS-Cluster'
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MaxBatchSize: '1'
          MinInstancesInService: 1
          PauseTime: PT5M


Outputs:

    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvironmentName}-VPCID

    BastionInstance:
        Description: Bastion Instance adress to enable debuging into the instances in the private network
        Value: !GetAtt BastionInstance.PublicIp

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-NETS

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PRIV-NETS



